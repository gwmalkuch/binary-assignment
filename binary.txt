Binary Exercises

1. Without using a calculator:

64 in base 10 -> base 2
	 64 base 10 = 1000000 base 2

100 in base 10 -> base 2
	100 base 10 = 01100100 base 2

100 in base 10 -> base 5
	100 base 10 = 400 base 5

1111111 in base 2 -> base 10
	1111111 base 2 = 127 base 10

2. Describe the algorithm for adding two binary numbers

Example:
    1001    9
   +0011   +3
   -----   --
   01100   12

The bits are added by column. 0+0=0, 1+0=1, and 1+1=10 so the 1 is always carried over to the next column in that instance.
 
3. Describe the algorithm for multiplying two binary numbers

Example:
    1001    9
   x0011   x3
   -----   --
   11011   27

Multiply the the bits of the bottom number by the top individually right to left just like regular long multiplication. Remember to move places over one to the left for each new product. Once you have your products for each bit add them together.

4. Is there a trick for multiplying numbers by 2? Dividing numbers by 2?

Just add 0 to the end. Subtract a 0 from the end. 

5. Write the truth tables for AND, OR, and NOT
(example) AND:
    ^ | a b
    -------
    1 | 1 1
    0 | 1 0
    0 | 0 1
    0 | 0 0
    
   && | a b
   ————————
    1 | 1 1
    0 | 1 0
    0 | 0 1
    0 | 0 0

   || | a b
   ———————-
    1 | 1 1
    1 | 1 0
    1 | 0 1
    0 | 0 0

    ! | a 
   ———————
    0 | 1 
    1 | 0  

EXTRA CREDIT 1: Using just the operators described above, build a "half adder".
A "half adder" takes in two inputs, A and B, and produces as output
the "sum" of A and B, and a "carry" if one exists.


Here is the truth table for the "half adder". + is the sum, and "C"
is the carry.
    + C | A B
    ---------
    0 0 | 0 0
    1 0 | 0 1
    1 0 | 1 0
    1 1 | 1 1

EXTRA CREDIT 2: Using just the operators described above, build a "full adder".
A "full adder" takes in three inputs: A, B, and Cin (the carry in), and produces two
outputs: the sum (S) and a carry out (Cout)

Here is the truth table for the "full adder".

A  B  Cin  | Cout S
------------------
0  0  0    |  0  0
0  0  1    |  0  1
0  1  0    |  0  1
0  1  1    |  1  0
1  0  0    |  0  1
1  0  1    |  1  0
1  1  0    |  1  0
1  1  1    |  1  1
